// **********************************************
// TOOLS: Mixins
// Filename: _1_tools_mixins.scss
// **********************************************

// @section       a small mixin for easy use of rem with px as fallback
//
// @source        https://gist.github.com/davidensinger/5217667
//                http://davidensinger.com/2013/03/using-rems-with-sass/
//
// @usage:        @include x-rem(font-size, 14px)
//                @include x-rem(margin, 0 12px 2 1.2)
//                @include x-rem(padding, 1.5 24px)
//
// thanks to Eric Meyer for https://github.com/ericam/susy
// and Hans Christian Reinl for http://drublic.de/blog/rem-fallback-sass-less/
@mixin x-rem($property, $values) {
    // Create a couple of empty lists as output buffers.
    $base-font-size: 16px !global;
    // should be consistent with your html/body font-size
    $px-values: ();
    $rem-values: ();
    // Loop through the $values list
    @each $value in $values {
        // For each property value, if it's in rem or px, derive both rem and
        // px values for it and add those to the end of the appropriate buffer.
        // Ensure all pixel values are rounded to the nearest pixel.
        //
        // The result of `0px == 0` will be `false` in future releases of Sass.
        // Unitless numbers will no longer be equal to the same numbers with units.
        // http://stackoverflow.com/questions/27071376/sass-mixin-error-because-of-deprecation
        @if index((0, 0px), $value) {
            // 0 -- use it without a unit
            $px-values: join($px-values, 0);
            $rem-values: join($rem-values, 0);
        }
        @else if type-of($value) == number and not unitless($value) and unit($value) == px {
            // px value given - calculate rem value from base-font-size
            $new-rem-value: $value / $base-font-size;
            $px-values: join($px-values, round($value));
            $rem-values: join($rem-values, #{$new-rem-value}rem);
        }
        @else if type-of($value) == number and not unitless($value) and unit($value) == "%" {
            // % value given - don't add px or rem
            $px-values: join($px-values, #{$value});
            $rem-values: join($rem-values, #{$value});
        }
        @else if $value == auto {
            // auto - don't add px or rem
            $px-values: join($px-values, auto);
            $rem-values: join($rem-values, auto);
        }
        @else {
            // unitless value - use those directly as rem and calculate the px-fallback
            $px-values: join($px-values, round($value * $base-font-size));
            $rem-values: join($rem-values, #{$value}rem);
        }
    }
    // output the converted rules
    #{$property}: $px-values;

    #{$property}: $rem-values;
}


/* Gradient widget mixin */
@mixin widgetgradient($firstColor, $secondColor) {
    background: $firstColor;
    background: -moz-linear-gradient(-45deg,  $firstColor 0%, $firstColor 10%, $secondColor 10%, $secondColor 20%, $firstColor 20%, $firstColor 30%, $secondColor 30%, $secondColor 40%, $firstColor 40%, $firstColor 50%, $secondColor 50%, $secondColor 60%, $firstColor 60%, $firstColor 70%, $secondColor 70%, $secondColor 80%, $firstColor 80%, $firstColor 90%, $secondColor 90%, $secondColor 100%);
    background: -webkit-linear-gradient(-45deg,  $firstColor 0%,$firstColor 10%,$secondColor 10%,$secondColor 20%,$firstColor 20%,$firstColor 30%,$secondColor 30%,$secondColor 40%,$firstColor 40%,$firstColor 50%,$secondColor 50%,$secondColor 60%,$firstColor 60%,$firstColor 70%,$secondColor 70%,$secondColor 80%,$firstColor 80%,$firstColor 90%,$secondColor 90%,$secondColor 100%);
    background: linear-gradient(135deg,  $firstColor 0%,$firstColor 10%,$secondColor 10%,$secondColor 20%,$firstColor 20%,$firstColor 30%,$secondColor 30%,$secondColor 40%,$firstColor 40%,$firstColor 50%,$secondColor 50%,$secondColor 60%,$firstColor 60%,$firstColor 70%,$secondColor 70%,$secondColor 80%,$firstColor 80%,$firstColor 90%,$secondColor 90%,$secondColor 100%);
}
